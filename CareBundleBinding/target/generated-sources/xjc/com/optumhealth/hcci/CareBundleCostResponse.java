//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.2-hudson-jaxb-ri-2.2-63- 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.09.11 at 05:56:05 PM CDT 
//


package com.optumhealth.hcci;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="careBundle" type="{http://www.example.org/treatmentcondition}CareBundleCost"/>
 *         &lt;element name="steps" type="{http://www.example.org/treatmentcondition}Step" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "careBundle",
    "steps"
})
@XmlRootElement(name = "CareBundleCostResponse")
public class CareBundleCostResponse implements Serializable, Cloneable, CopyTo, Equals, HashCode, ToString
{

    private final static long serialVersionUID = 1L;
    @XmlElement(required = true)
    protected CareBundleCost careBundle;
    protected List<Step> steps;

    /**
     * Default no-arg constructor
     * 
     */
    public CareBundleCostResponse() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public CareBundleCostResponse(final CareBundleCost careBundle, final List<Step> steps) {
        this.careBundle = careBundle;
        this.steps = steps;
    }

    /**
     * Gets the value of the careBundle property.
     * 
     * @return
     *     possible object is
     *     {@link CareBundleCost }
     *     
     */
    public CareBundleCost getCareBundle() {
        return careBundle;
    }

    /**
     * Sets the value of the careBundle property.
     * 
     * @param value
     *     allowed object is
     *     {@link CareBundleCost }
     *     
     */
    public void setCareBundle(CareBundleCost value) {
        this.careBundle = value;
    }

    /**
     * Gets the value of the steps property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the steps property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSteps().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Step }
     * 
     * 
     */
    public List<Step> getSteps() {
        if (steps == null) {
            steps = new ArrayList<Step>();
        }
        return this.steps;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            CareBundleCost theCareBundle;
            theCareBundle = this.getCareBundle();
            strategy.appendField(locator, this, "careBundle", buffer, theCareBundle);
        }
        {
            List<Step> theSteps;
            theSteps = this.getSteps();
            strategy.appendField(locator, this, "steps", buffer, theSteps);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof CareBundleCostResponse)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final CareBundleCostResponse that = ((CareBundleCostResponse) object);
        {
            CareBundleCost lhsCareBundle;
            lhsCareBundle = this.getCareBundle();
            CareBundleCost rhsCareBundle;
            rhsCareBundle = that.getCareBundle();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "careBundle", lhsCareBundle), LocatorUtils.property(thatLocator, "careBundle", rhsCareBundle), lhsCareBundle, rhsCareBundle)) {
                return false;
            }
        }
        {
            List<Step> lhsSteps;
            lhsSteps = this.getSteps();
            List<Step> rhsSteps;
            rhsSteps = that.getSteps();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "steps", lhsSteps), LocatorUtils.property(thatLocator, "steps", rhsSteps), lhsSteps, rhsSteps)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            CareBundleCost theCareBundle;
            theCareBundle = this.getCareBundle();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "careBundle", theCareBundle), currentHashCode, theCareBundle);
        }
        {
            List<Step> theSteps;
            theSteps = this.getSteps();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "steps", theSteps), currentHashCode, theSteps);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof CareBundleCostResponse) {
            final CareBundleCostResponse copy = ((CareBundleCostResponse) draftCopy);
            if (this.careBundle!= null) {
                CareBundleCost sourceCareBundle;
                sourceCareBundle = this.getCareBundle();
                CareBundleCost copyCareBundle = ((CareBundleCost) strategy.copy(LocatorUtils.property(locator, "careBundle", sourceCareBundle), sourceCareBundle));
                copy.setCareBundle(copyCareBundle);
            } else {
                copy.careBundle = null;
            }
            if ((this.steps!= null)&&(!this.steps.isEmpty())) {
                List<Step> sourceSteps;
                sourceSteps = this.getSteps();
                @SuppressWarnings("unchecked")
                List<Step> copySteps = ((List<Step> ) strategy.copy(LocatorUtils.property(locator, "steps", sourceSteps), sourceSteps));
                copy.steps = null;
                List<Step> uniqueStepsl = copy.getSteps();
                uniqueStepsl.addAll(copySteps);
            } else {
                copy.steps = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new CareBundleCostResponse();
    }

}
